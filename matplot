import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# Confusion matrix values (excluding damaged QR codes)
# TN = 4, FP = 1, FN = 2, TP = 13
conf_matrix = np.array([[4, 1],   # Actual Benign: TN, FP
                        [2, 13]]) # Actual Phishing: FN, TP

# Plot Confusion Matrix
plt.figure(figsize=(6, 5))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues",
            xticklabels=["Benign", "Phishing"],
            yticklabels=["Benign", "Phishing"])
plt.ylabel("Actual")
plt.xlabel("Predicted")
plt.title("QRShield Confusion Matrix")
plt.savefig("qrshield_confusion_matrix.png", dpi=200, bbox_inches="tight")
plt.show()

# Calculate Precision and Recall for phishing detection
TP = 13
FP = 1
FN = 2
precision = TP / (TP + FP)
recall = TP / (TP + FN)

# Plot Precision and Recall
plt.figure(figsize=(5, 4))
plt.bar(["Precision", "Recall"], [precision, recall], color=["#3498db", "#e67e22"])
plt.ylim(0, 1.05)
plt.ylabel("Score")
plt.title("QRShield Precision and Recall (Phishing Detection)")
for i, val in enumerate([precision, recall]):
    plt.text(i, val + 0.02, f"{val:.2f}", ha='center', fontsize=10)
plt.savefig("qrshield_precision_recall.png", dpi=200, bbox_inches="tight")
plt.show()

print(f"Precision: {precision:.2f}, Recall: {recall:.2f}")
